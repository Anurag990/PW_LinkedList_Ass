package LinkedList;public class List {    Node head;    class Node    {        int data;        Node next;        Node(int d)        {            data = d;            next = null;        }    }    public void insertAtEnd(int newData)    {        if(head == null)        {            head = new Node(newData);            return;        }        Node newNode = new Node(newData);        newNode.next = null;        Node temp = head;        while(temp.next != null)        {            temp = temp.next;        }        temp.next = newNode;    }    public void display()    {        Node temp = head;        while(temp.next != null)        {            System.out.print(temp.data + " -> ");            temp = temp.next;        }        System.out.print(temp.data);    }    public Node addTwoNumbers(Node l1, Node l2) //Question 5    {        Node t1 = l1, t2 = l2;        Node dNode = new Node(-1);        Node curr = dNode;        int carry = 0;        while(t1 != null || t2 != null)        {            int data = carry;            if(t1 != null)            {                data += t1.data;            }            if(t2 != null)            {                data += t2.data;            }            Node node = new Node(data%10);            carry = data / 10;            curr.next = node;            curr = node;            if(t1 != null)            {                t1 = t1.next;            }            if(t2 != null)            {                t2 = t2.next;            }        }        if(carry > 0)        {            Node node = new Node(carry);            curr.next = node;            curr = node;        }        return dNode.next;    }    public boolean CheckPalindrome(Node head)//Question 4    {        if(head == null || head.next == null)        {            return true;//An empty list or list with a single list        }        //Step 1: Find the middle of the Linked List        Node slow = head, fast = head;        while(fast != null && fast.next != null)        {            slow = slow.next;            fast = fast.next.next;        }        //Step 2: Reverse the second half of the Linked List        Node secondHalf = reverseList(slow);        //Step 3: Compare the reverse second half with the first half        while(secondHalf != null)        {            if(head.data != secondHalf.data)            {                return false;            }            head = head.next;            secondHalf = secondHalf.next;        }        return true;    }    private Node reverseList(Node head)    {        Node curr = head;        Node Prev = null;        Node next;        while(curr != null)        {            next = curr.next;            curr.next = Prev;            Prev = curr;            curr = next;        }        return Prev;    }    public void RemoveDuplicate()//Question 3    {        Node temp = head;        while (temp.next != null)        {            if(temp.data == temp.next.data)            {                temp.next = temp.next.next;            }            else            {                temp = temp.next;            }        }    }    public void InsertAtAnyPoint(int data, int p)//Question 2    {        Node prev = head;        while((p-1)>0)        {            p--;            prev = prev.next;        }        Node newNode = new Node(data);        newNode.next = prev.next;        prev.next = newNode;    }    public void find(int data)//Question 1    {        Node temp = head;        while(temp != null)        {            if(temp.data == data)            {                System.out.println("YES");                return;            }            temp = temp.next;        }        System.out.println("NO");    }    public static void main(String[] args) {        List l = new List();        l.insertAtEnd(1);        l.insertAtEnd(1);        l.insertAtEnd(1);        l.insertAtEnd(2);        l.insertAtEnd(1);        l.display();        System.out.println();        //l.find(14);        //l.InsertAtAnyPoint(3, 2);        //l.RemoveDuplicate();        System.out.println(l.CheckPalindrome(l.head));        //l.display();    }}